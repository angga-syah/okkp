<UserControl x:Class="InvoiceApp.WPF.Controls.MultiLineTextBox"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="120" d:DesignWidth="300">

    <UserControl.Resources>
        
        <!-- Multi-line TextBox Style -->
        <Style x:Key="MultiLineTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignTextBox}">
            <Setter Property="AcceptsReturn" Value="True"/>
            <Setter Property="AcceptsTab" Value="True"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
            <Setter Property="MinLines" Value="3"/>
            <Setter Property="MaxLines" Value="10"/>
            <Setter Property="materialDesign:HintAssist.IsFloating" Value="True"/>
            <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True"/>
            <Setter Property="materialDesign:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
            <Setter Property="BorderThickness" Value="0,0,0,2"/>
            <Setter Property="Padding" Value="0,8,0,8"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="LineHeight" Value="20"/>
            <Setter Property="SpellCheck.IsEnabled" Value="True"/>
            
            <Style.Triggers>
                <!-- Focus trigger -->
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="materialDesign:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueLightBrush}"/>
                </Trigger>
                
                <!-- Validation error trigger -->
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="materialDesign:TextFieldAssist.UnderlineBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                </Trigger>
                
                <!-- Read-only trigger -->
                <Trigger Property="IsReadOnly" Value="True">
                    <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxDisabledBackground}"/>
                    <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBodyLight}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Outlined MultiLine TextBox Style -->
        <Style x:Key="OutlinedMultiLineTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource MaterialDesignOutlinedTextBox}">
            <Setter Property="AcceptsReturn" Value="True"/>
            <Setter Property="AcceptsTab" Value="True"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
            <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
            <Setter Property="MinLines" Value="3"/>
            <Setter Property="MaxLines" Value="10"/>
            <Setter Property="materialDesign:HintAssist.IsFloating" Value="True"/>
            <Setter Property="materialDesign:TextFieldAssist.HasClearButton" Value="True"/>
            <Setter Property="Padding" Value="12,8"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="LineHeight" Value="20"/>
            <Setter Property="SpellCheck.IsEnabled" Value="True"/>
        </Style>

        <!-- Character Counter Style -->
        <Style x:Key="CharacterCounterStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBodyLight}"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="Margin" Value="0,4,0,0"/>
        </Style>

        <!-- Error Template -->
        <ControlTemplate x:Key="ValidationErrorTemplate">
            <DockPanel>
                <materialDesign:PackIcon DockPanel.Dock="Right" 
                                         Kind="AlertCircle" 
                                         Foreground="{DynamicResource ValidationErrorBrush}" 
                                         Width="16" Height="16"
                                         Margin="5,0,0,0"
                                         VerticalAlignment="Top"/>
                <Border BorderBrush="{DynamicResource ValidationErrorBrush}" 
                        BorderThickness="1" 
                        CornerRadius="3">
                    <AdornedElementPlaceholder/>
                </Border>
            </DockPanel>
        </ControlTemplate>

    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Label -->
        <TextBlock Grid.Row="0"
                   Text="{Binding Label, RelativeSource={RelativeSource AncestorType=UserControl}}"
                   Style="{StaticResource MaterialDesignCaptionTextBlock}"
                   Margin="0,0,0,4"
                   Visibility="{Binding ShowLabel, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource BooleanToVisibilityConverter}}"/>

        <!-- Main TextBox -->
        <TextBox x:Name="MainTextBox"
                 Grid.Row="1"
                 Style="{DynamicResource MultiLineTextBoxStyle}"
                 Text="{Binding Text, RelativeSource={RelativeSource AncestorType=UserControl}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                 MinHeight="{Binding MinHeight, RelativeSource={RelativeSource AncestorType=UserControl}}"
                 MaxHeight="{Binding MaxHeight, RelativeSource={RelativeSource AncestorType=UserControl}}"
                 MinLines="{Binding MinLines, RelativeSource={RelativeSource AncestorType=UserControl}}"
                 MaxLines="{Binding MaxLines, RelativeSource={RelativeSource AncestorType=UserControl}}"
                 MaxLength="{Binding MaxLength, RelativeSource={RelativeSource AncestorType=UserControl}}"
                 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType=UserControl}}"
                 IsEnabled="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=UserControl}}"
                 materialDesign:HintAssist.Hint="{Binding PlaceholderText, RelativeSource={RelativeSource AncestorType=UserControl}}"
                 materialDesign:HintAssist.HelperText="{Binding HelperText, RelativeSource={RelativeSource AncestorType=UserControl}}"
                 Validation.ErrorTemplate="{StaticResource ValidationErrorTemplate}"
                 TextChanged="MainTextBox_TextChanged"
                 PreviewKeyDown="MainTextBox_PreviewKeyDown"
                 GotFocus="MainTextBox_GotFocus"
                 LostFocus="MainTextBox_LostFocus"/>

        <!-- Character Counter and Word Count -->
        <StackPanel Grid.Row="2" 
                    Orientation="Horizontal" 
                    HorizontalAlignment="Right"
                    Margin="0,4,0,0"
                    Visibility="{Binding ShowCounters, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource BooleanToVisibilityConverter}}">
            
            <!-- Word Count -->
            <TextBlock x:Name="WordCountText"
                       Style="{StaticResource CharacterCounterStyle}"
                       Margin="0,0,12,0"
                       Visibility="{Binding ShowWordCount, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Run Text="{Binding WordCount, RelativeSource={RelativeSource AncestorType=UserControl}, Mode=OneWay}"/>
                <Run Text=" words"/>
            </TextBlock>
            
            <!-- Character Count -->
            <TextBlock x:Name="CharacterCountText"
                       Style="{StaticResource CharacterCounterStyle}"
                       Visibility="{Binding ShowCharacterCount, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource BooleanToVisibilityConverter}}">
                <Run Text="{Binding CharacterCount, RelativeSource={RelativeSource AncestorType=UserControl}, Mode=OneWay}"/>
                <Run Text="/"/>
                <Run Text="{Binding MaxLength, RelativeSource={RelativeSource AncestorType=UserControl}}"/>
            </TextBlock>
            
        </StackPanel>

        <!-- Validation Error Display -->
        <TextBlock x:Name="ErrorTextBlock"
                   Grid.Row="3"
                   Text="{Binding ErrorMessage, RelativeSource={RelativeSource AncestorType=UserControl}}"
                   Foreground="{DynamicResource ValidationErrorBrush}"
                   FontSize="12"
                   Margin="0,4,0,0"
                   TextWrapping="Wrap"
                   Visibility="{Binding HasError, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource BooleanToVisibilityConverter}}"/>

        <!-- Action Buttons (if needed) -->
        <StackPanel Grid.Row="3"
                    Orientation="Horizontal"
                    HorizontalAlignment="Right"
                    Margin="0,8,0,0"
                    Visibility="{Binding ShowActionButtons, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource BooleanToVisibilityConverter}}">
            
            <!-- Clear Button -->
            <Button x:Name="ClearButton"
                    Content="Clear"
                    Style="{StaticResource MaterialDesignFlatButton}"
                    Click="ClearButton_Click"
                    Visibility="{Binding ShowClearButton, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            
            <!-- Format Button -->
            <Button x:Name="FormatButton"
                    Content="Format"
                    Style="{StaticResource MaterialDesignFlatButton}"
                    Margin="8,0,0,0"
                    Click="FormatButton_Click"
                    Visibility="{Binding ShowFormatButton, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            
        </StackPanel>

    </Grid>
</UserControl>